//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from formula.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class formulaLexer : Lexer {
	public const int
		LPAREN=1, RPAREN=2, PLUS=3, MINUS=4, TIMES=5, DIV=6, GT=7, LT=8, EQ=9, 
		POINT=10, E=11, POW=12, LETTER=13, DIGIT=14, WS=15;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", 
		"POINT", "E", "POW", "LETTER", "DIGIT", "WS"
	};


	public formulaLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'='", "'.'", 
		null, "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", 
		"EQ", "POINT", "E", "POW", "LETTER", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "formula.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x11");
		sb.Append("\x45\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x3\x2\x3\x2\x3");
		sb.Append("\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b");
		sb.Append("\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE");
		sb.Append("\x5\xE;\n\xE\x3\xF\x3\xF\x3\x10\x6\x10@\n\x10\r\x10\xE\x10\x41");
		sb.Append("\x3\x10\x3\x10\x2\x2\x11\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t");
		sb.Append("\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11\x3\x2");
		sb.Append("\x5\x4\x2GGgg\x4\x2\x43\\\x63|\x5\x2\v\f\xF\xF\"\"\x45\x2\x3");
		sb.Append("\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2");
		sb.Append("\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11");
		sb.Append("\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3");
		sb.Append("\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2");
		sb.Append("\x2\x2\x2\x1F\x3\x2\x2\x2\x3!\x3\x2\x2\x2\x5#\x3\x2\x2\x2\a");
		sb.Append("%\x3\x2\x2\x2\t\'\x3\x2\x2\x2\v)\x3\x2\x2\x2\r+\x3\x2\x2\x2");
		sb.Append("\xF-\x3\x2\x2\x2\x11/\x3\x2\x2\x2\x13\x31\x3\x2\x2\x2\x15\x33");
		sb.Append("\x3\x2\x2\x2\x17\x35\x3\x2\x2\x2\x19\x37\x3\x2\x2\x2\x1B:\x3");
		sb.Append("\x2\x2\x2\x1D<\x3\x2\x2\x2\x1F?\x3\x2\x2\x2!\"\a*\x2\x2\"\x4");
		sb.Append("\x3\x2\x2\x2#$\a+\x2\x2$\x6\x3\x2\x2\x2%&\a-\x2\x2&\b\x3\x2");
		sb.Append("\x2\x2\'(\a/\x2\x2(\n\x3\x2\x2\x2)*\a,\x2\x2*\f\x3\x2\x2\x2");
		sb.Append("+,\a\x31\x2\x2,\xE\x3\x2\x2\x2-.\a@\x2\x2.\x10\x3\x2\x2\x2/");
		sb.Append("\x30\a>\x2\x2\x30\x12\x3\x2\x2\x2\x31\x32\a?\x2\x2\x32\x14\x3");
		sb.Append("\x2\x2\x2\x33\x34\a\x30\x2\x2\x34\x16\x3\x2\x2\x2\x35\x36\t");
		sb.Append("\x2\x2\x2\x36\x18\x3\x2\x2\x2\x37\x38\a`\x2\x2\x38\x1A\x3\x2");
		sb.Append("\x2\x2\x39;\t\x3\x2\x2:\x39\x3\x2\x2\x2;\x1C\x3\x2\x2\x2<=\x4");
		sb.Append("\x32;\x2=\x1E\x3\x2\x2\x2>@\t\x4\x2\x2?>\x3\x2\x2\x2@\x41\x3");
		sb.Append("\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x43\x3\x2");
		sb.Append("\x2\x2\x43\x44\b\x10\x2\x2\x44 \x3\x2\x2\x2\x5\x2:\x41\x3\x2");
		sb.Append("\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
